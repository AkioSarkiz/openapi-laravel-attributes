"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPage = void 0;
const inferPagePath_1 = require("./inferPagePath");
const renderPageContent_1 = require("./renderPageContent");
const renderPageExcerpt_1 = require("./renderPageExcerpt");
const resolvePageComponentInfo_1 = require("./resolvePageComponentInfo");
const resolvePageContent_1 = require("./resolvePageContent");
const resolvePageData_1 = require("./resolvePageData");
const resolvePageDataInfo_1 = require("./resolvePageDataInfo");
const resolvePageDate_1 = require("./resolvePageDate");
const resolvePageFileContent_1 = require("./resolvePageFileContent");
const resolvePageFilePath_1 = require("./resolvePageFilePath");
const resolvePageFrontmatter_1 = require("./resolvePageFrontmatter");
const resolvePageHtmlInfo_1 = require("./resolvePageHtmlInfo");
const resolvePageKey_1 = require("./resolvePageKey");
const resolvePageLang_1 = require("./resolvePageLang");
const resolvePageOptions_1 = require("./resolvePageOptions");
const resolvePagePath_1 = require("./resolvePagePath");
const resolvePagePermalink_1 = require("./resolvePagePermalink");
const resolvePageSlug_1 = require("./resolvePageSlug");
const createPage = async (app, optionsRaw) => {
    // resolve page options from raw options
    const options = await resolvePageOptions_1.resolvePageOptions({ app, optionsRaw });
    // resolve page file absolute path and relative path
    const { filePath, filePathRelative } = resolvePageFilePath_1.resolvePageFilePath({
        app,
        options,
    });
    // read the raw file content according to the absolute file path
    const contentRaw = await resolvePageFileContent_1.resolvePageFileContent({ filePath, options });
    // resolve content & frontmatter & raw excerpt from raw content
    const { content, frontmatterRaw, excerptRaw } = resolvePageContent_1.resolvePageContent({
        contentRaw,
    });
    // resolve frontmatter from raw frontmatter and page options
    const frontmatter = resolvePageFrontmatter_1.resolvePageFrontmatter({ frontmatterRaw, options });
    // render excerpt
    const excerpt = renderPageExcerpt_1.renderPageExcerpt({
        app,
        excerptRaw,
        filePath,
        filePathRelative,
        frontmatter,
    });
    // render page content and extract information
    const { contentRendered, deps, headers, hoistedTags, links, title, } = await renderPageContent_1.renderPageContent({
        app,
        content,
        filePath,
        filePathRelative,
        frontmatter,
    });
    // resolve slug from file path
    const slug = resolvePageSlug_1.resolvePageSlug({ filePathRelative });
    // resolve date from file path
    const date = resolvePageDate_1.resolvePageDate({ frontmatter, filePathRelative });
    // infer page path according to file path
    const { pathInferred, pathLocale } = inferPagePath_1.inferPagePath({ app, filePathRelative });
    // resolve language from frontmatter and site options
    const lang = resolvePageLang_1.resolvePageLang({ app, frontmatter, pathLocale });
    // resolve page permalink
    const permalink = resolvePagePermalink_1.resolvePagePermalink({
        frontmatter,
        slug,
        date,
        pathInferred,
        pathLocale,
    });
    // resolve page path
    const path = resolvePagePath_1.resolvePagePath({ permalink, pathInferred, options });
    // resolve path key
    const key = resolvePageKey_1.resolvePageKey({ path });
    // resolve page rendered html file path
    const { htmlFilePath, htmlFilePathRelative } = resolvePageHtmlInfo_1.resolvePageHtmlInfo({
        app,
        path,
    });
    // resolve page component and extract headers & links
    const { componentFilePath, componentFilePathRelative, componentFileChunkName, } = await resolvePageComponentInfo_1.resolvePageComponentInfo({
        app,
        hoistedTags,
        htmlFilePathRelative,
        key,
    });
    const { dataFilePath, dataFilePathRelative, dataFileChunkName, } = resolvePageDataInfo_1.resolvePageDataInfo({ app, htmlFilePathRelative, key });
    const page = {
        // base fields
        key,
        path,
        title,
        lang,
        frontmatter,
        excerpt,
        headers,
        // extra fields
        content,
        contentRendered,
        date,
        deps,
        hoistedTags,
        links,
        pathInferred,
        pathLocale,
        permalink,
        slug,
        // file info
        filePath,
        filePathRelative,
        componentFilePath,
        componentFilePathRelative,
        componentFileChunkName,
        dataFilePath,
        dataFilePathRelative,
        dataFileChunkName,
        htmlFilePath,
        htmlFilePathRelative,
    };
    // resolve page data
    page.data = await resolvePageData_1.resolvePageData({ app, page });
    return page;
};
exports.createPage = createPage;
